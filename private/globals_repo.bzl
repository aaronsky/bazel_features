load("//private:parse.bzl", "parse_version")

def _globals_repo_impl(rctx):
    bazel_version = parse_version(native.bazel_version)

    allow_unresolved_symlinks_flag = (
        "experimental_allow_unresolved_symlinks"
        if bazel_version < parse_version("7.0.0")
        else "allow_unresolved_symlinks"
    )

    rctx.file("BUILD.bazel", """\
# @generated by bazel_features/private/globals_repo.bzl

# Allow rules to sense the value of this flag, which was renamed.
config_setting(
    name = "allow_unresolved_symlinks",
    values = {allow_unresolved_symlinks},
    visibility = ["//visibility:public"],
)
""".format(
    allow_unresolved_symlinks = {
        allow_unresolved_symlinks_flag: "true"
    },
))

    lines = ["globals = struct("]
    for global_, version in rctx.attr.globals.items():
        if not _is_valid_identifier(global_):
            fail("Invalid global name: %s" % global_)

        value = global_ if bazel_version >= parse_version(version) else "None"
        lines.append("    %s = %s," % (global_, value))

    lines.append(")")

    rctx.file("globals.bzl", "\n".join(lines))

globals_repo = repository_rule(
    _globals_repo_impl,
    attrs = {
        "globals": attr.string_dict(
            mandatory = True,
        ),
    },
)

def _is_valid_identifier(s):
    if not s or s[0].isdigit():
        return False
    return all([c.isalnum() or c == "_" for c in s.elems()])
